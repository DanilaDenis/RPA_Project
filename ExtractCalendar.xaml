<Activity mc:Ignorable="sap sap2010" x:Class="ExtractCalendar" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mg="clr-namespace:Microsoft.Graph;assembly=Microsoft.Graph" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.Collections;assembly=System.Private.CoreLib" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:uma="clr-namespace:UiPath.MicrosoftOffice365.Activities;assembly=UiPath.MicrosoftOffice365.Activities" xmlns:umac="clr-namespace:UiPath.MicrosoftOffice365.Activities.Contracts;assembly=UiPath.MicrosoftOffice365.Activities" xmlns:umac1="clr-namespace:UiPath.MicrosoftOffice365.Activities.Calendar;assembly=UiPath.MicrosoftOffice365.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="emailEmployee" Type="InArgument(x:String)" />
    <x:Property Name="emailGroup" Type="InArgument(x:String)" />
    <x:Property Name="startDate" Type="InArgument(s:DateTime)" />
    <x:Property Name="endDate" Type="InArgument(s:DateTime)" />
    <x:Property Name="nrGroupMembers" Type="InArgument(x:Int32)" />
    <x:Property Name="absences" Type="OutArgument(scg:Dictionary(s:DateTime, scg:List(mg:Event)))" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap:VirtualizedContainerService.HintSize>882,4746.666666666667</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Security</x:String>
      <x:String>UiPath.MicrosoftOffice365.Enums</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Shared.Activities.ConnectionService.Contracts</x:String>
      <x:String>Microsoft.Graph</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Calendar</x:String>
      <x:String>UiPath.MicrosoftOffice365.Calendar.Models</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Calendar.Enums</x:String>
      <x:String>UiPath.Shared.Activities.Utils</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Calendar.Filters</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Contracts</x:String>
      <x:String>UiPath.MicrosoftOffice365.Calendar.Enums</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Filters</x:String>
      <x:String>UiPath.Shared.Activities.Business</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Groups</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices</AssemblyReference>
      <AssemblyReference>UiPath.MicrosoftOffice365</AssemblyReference>
      <AssemblyReference>UiPath.MicrosoftOffice365.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>netstandard</AssemblyReference>
      <AssemblyReference>Microsoft.Graph</AssemblyReference>
      <AssemblyReference>Microsoft.Graph.Core</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Linq.Async.Queryable</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>RpaProj.Core</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="ExtractCalendar" sap:VirtualizedContainerService.HintSize="802,4682" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="mg:Event[]" Name="outputEvents" />
      <Variable x:TypeArguments="scg:Dictionary(s:DateTime, scg:List(mg:Event))" Name="absencesVar">
        <Variable.Default>
          <CSharpValue x:TypeArguments="scg:Dictionary(s:DateTime, scg:List(mg:Event))" sap2010:WorkflowViewState.IdRef="CSharpValue`1_32">new Dictionary&lt;System.DateTime, System.Collections.Generic.List&lt;Microsoft.Graph.Event&gt;&gt;()</CSharpValue>
        </Variable.Default>
      </Variable>
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <uma:Office365ApplicationScope Account="{x:Null}" ApplicationSecret="{x:Null}" CertificateAsBase64="{x:Null}" CertificatePassword="{x:Null}" ConnectionAccountName="{x:Null}" ConnectionId="{x:Null}" Connector="{x:Null}" ContinueOnError="{x:Null}" OAuth2Username="{x:Null}" Password="{x:Null}" SecureApplicationSecret="{x:Null}" SecurePassword="{x:Null}" Timeout="{x:Null}" AuthenticationType="InteractiveToken" DisplayName="Microsoft Office 365 Scope" Environment="Global" sap:VirtualizedContainerService.HintSize="740,4571.333333333333" sap2010:WorkflowViewState.IdRef="Office365ApplicationScope_1" OAuthApplication="UiPath" UseConnectionService="False">
      <uma:Office365ApplicationScope.ApplicationId>
        <InArgument x:TypeArguments="x:String">
          <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_60">GlobalVariablesNamespace.GlobalVariables.strAppId</CSharpValue>
        </InArgument>
      </uma:Office365ApplicationScope.ApplicationId>
      <uma:Office365ApplicationScope.AuthenticationScopes>
        <scg:List x:TypeArguments="InArgument(x:String)" Capacity="1">
          <InArgument x:TypeArguments="x:String">Calendars.ReadWrite</InArgument>
        </scg:List>
      </uma:Office365ApplicationScope.AuthenticationScopes>
      <uma:Office365ApplicationScope.Body>
        <ActivityAction x:TypeArguments="umac:IClientServices">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="umac:IClientServices" Name="ParentScope" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="706,4432" sap2010:WorkflowViewState.IdRef="Sequence_2">
            <Sequence.Variables>
              <Variable x:TypeArguments="mg:Event[]" Name="events" />
              <Variable x:TypeArguments="mg:Event" Name="currentItem" />
              <Variable x:TypeArguments="x:String" Name="outStr" />
              <Variable x:TypeArguments="mg:Group" Name="groupVar" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <umac1:SearchEvents Account="{x:Null}" Calendar="{x:Null}" ContinueOnError="{x:Null}" EventId="{x:Null}" SearchQuery="{x:Null}" AuthScopesInvalid="False" DisplayName="Search Events" sap:VirtualizedContainerService.HintSize="664,86.66666666666667" sap2010:WorkflowViewState.IdRef="SearchEvents_1" MaxResults="50" ReturnRecurring="True">
              <umac1:SearchEvents.EndDate>
                <InArgument x:TypeArguments="s:DateTime">
                  <CSharpValue x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpValue`1_3">endDate</CSharpValue>
                </InArgument>
              </umac1:SearchEvents.EndDate>
              <umac1:SearchEvents.Events>
                <OutArgument x:TypeArguments="mg:Event[]">
                  <CSharpReference x:TypeArguments="mg:Event[]" sap2010:WorkflowViewState.IdRef="CSharpReference`1_1">events</CSharpReference>
                </OutArgument>
              </umac1:SearchEvents.Events>
              <umac1:SearchEvents.StartDate>
                <InArgument x:TypeArguments="s:DateTime">
                  <CSharpValue x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpValue`1_2">startDate</CSharpValue>
                </InArgument>
              </umac1:SearchEvents.StartDate>
            </umac1:SearchEvents>
            <Assign sap:VirtualizedContainerService.HintSize="664,85.33333333333333" sap2010:WorkflowViewState.IdRef="Assign_3">
              <Assign.To>
                <OutArgument x:TypeArguments="mg:Event[]">
                  <CSharpReference x:TypeArguments="mg:Event[]" sap2010:WorkflowViewState.IdRef="CSharpReference`1_10">outputEvents</CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="mg:Event[]">
                  <CSharpValue x:TypeArguments="mg:Event[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_24">events</CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <ui:ForEach x:TypeArguments="x:Object" CurrentIndex="{x:Null}" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="664,3971.3333333333335" sap2010:WorkflowViewState.IdRef="ForEach`1_1">
              <ui:ForEach.Body>
                <ActivityAction x:TypeArguments="x:Object">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="x:Object" Name="item" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="629.3333333333334,3781.3333333333335" sap2010:WorkflowViewState.IdRef="Sequence_3">
                    <Sequence.Variables>
                      <Variable x:TypeArguments="mg:Attendee" Name="attendee" />
                    </Sequence.Variables>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="587.3333333333334,148" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
                      <ui:MultipleAssign.AssignOperations>
                        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
                            <ui:AssignOperation.To>
                              <OutArgument x:TypeArguments="mg:Event">
                                <CSharpReference x:TypeArguments="mg:Event" sap2010:WorkflowViewState.IdRef="CSharpReference`1_4">currentItem</CSharpReference>
                              </OutArgument>
                            </ui:AssignOperation.To>
                            <ui:AssignOperation.Value>
                              <InArgument x:TypeArguments="mg:Event">
                                <CSharpValue x:TypeArguments="mg:Event" sap2010:WorkflowViewState.IdRef="CSharpValue`1_11">(Microsoft.Graph.Event) item</CSharpValue>
                              </InArgument>
                            </ui:AssignOperation.Value>
                          </ui:AssignOperation>
                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
                            <ui:AssignOperation.To>
                              <OutArgument x:TypeArguments="x:String">
                                <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_5">outStr</CSharpReference>
                              </OutArgument>
                            </ui:AssignOperation.To>
                            <ui:AssignOperation.Value>
                              <InArgument x:TypeArguments="x:String">
                                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_12" xml:space="preserve">currentItem.Subject.ToString() + Environment.NewLine +
currentItem.Organizer.EmailAddress.Address.ToString() + Environment.NewLine +
currentItem.Start.DateTime.ToString() + Environment.NewLine +
currentItem.End.DateTime.ToString() + Environment.NewLine + Environment.NewLine +
"Attendees:" + Environment.NewLine</CSharpValue>
                              </InArgument>
                            </ui:AssignOperation.Value>
                          </ui:AssignOperation>
                        </scg:List>
                      </ui:MultipleAssign.AssignOperations>
                    </ui:MultipleAssign>
                    <If sap2010:Annotation.AnnotationText="verifica daca e un absence" sap:VirtualizedContainerService.HintSize="587.3333333333334,2928.6666666666665" sap2010:WorkflowViewState.IdRef="If_2">
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_27" xml:space="preserve">currentItem.Attendees.Any(a =&gt; a.EmailAddress.Address.Equals(emailGroup)) &amp;&amp; // attendee = grup
currentItem.Subject.StartsWith("Absence")</CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <If.Then>
                        <Sequence sap:VirtualizedContainerService.HintSize="552.6666666666666,2714" sap2010:WorkflowViewState.IdRef="Sequence_7">
                          <Sequence.Variables>
                            <Variable x:TypeArguments="s:DateTime" Name="currentDate" />
                            <Variable x:TypeArguments="s:DateTime" Name="currentStartDate" />
                            <Variable x:TypeArguments="s:DateTime" Name="currentEndDate" />
                            <Variable x:TypeArguments="scg:List(s:DateTime)" Name="dateList" />
                          </Sequence.Variables>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="510.6666666666667,178.66666666666666" sap2010:WorkflowViewState.IdRef="MultipleAssign_3">
                            <ui:MultipleAssign.AssignOperations>
                              <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_5">
                                  <ui:AssignOperation.To>
                                    <OutArgument x:TypeArguments="s:DateTime">
                                      <CSharpReference x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpReference`1_13">currentStartDate</CSharpReference>
                                    </OutArgument>
                                  </ui:AssignOperation.To>
                                  <ui:AssignOperation.Value>
                                    <InArgument x:TypeArguments="s:DateTime">
                                      <CSharpValue x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpValue`1_43">DateTime.Parse(currentItem.Start.DateTime).Date</CSharpValue>
                                    </InArgument>
                                  </ui:AssignOperation.Value>
                                </ui:AssignOperation>
                                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_6">
                                  <ui:AssignOperation.To>
                                    <OutArgument x:TypeArguments="s:DateTime">
                                      <CSharpReference x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpReference`1_14">currentEndDate</CSharpReference>
                                    </OutArgument>
                                  </ui:AssignOperation.To>
                                  <ui:AssignOperation.Value>
                                    <InArgument x:TypeArguments="s:DateTime">
                                      <CSharpValue x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpValue`1_44">DateTime.Parse(currentItem.End.DateTime).Date</CSharpValue>
                                    </InArgument>
                                  </ui:AssignOperation.Value>
                                </ui:AssignOperation>
                                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_7">
                                  <ui:AssignOperation.To>
                                    <OutArgument x:TypeArguments="scg:List(s:DateTime)">
                                      <CSharpReference x:TypeArguments="scg:List(s:DateTime)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_17">dateList</CSharpReference>
                                    </OutArgument>
                                  </ui:AssignOperation.To>
                                  <ui:AssignOperation.Value>
                                    <InArgument x:TypeArguments="scg:List(s:DateTime)">
                                      <CSharpValue x:TypeArguments="scg:List(s:DateTime)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_49">new List&lt;DateTime&gt;()</CSharpValue>
                                    </InArgument>
                                  </ui:AssignOperation.Value>
                                </ui:AssignOperation>
                              </scg:List>
                            </ui:MultipleAssign.AssignOperations>
                          </ui:MultipleAssign>
                          <If sap:VirtualizedContainerService.HintSize="510.6666666666667,356.6666666666667" sap2010:WorkflowViewState.IdRef="If_4">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_55">DateTime.Parse(currentItem.End.DateTime).TimeOfDay.Equals(TimeSpan.Zero)</CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <If.Then>
                              <Sequence sap:VirtualizedContainerService.HintSize="476,172.66666666666666" sap2010:WorkflowViewState.IdRef="Sequence_16">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <Assign sap:VirtualizedContainerService.HintSize="434,85.33333333333333" sap2010:WorkflowViewState.IdRef="Assign_7">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="s:DateTime">
                                      <CSharpReference x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpReference`1_19">currentEndDate</CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="s:DateTime">
                                      <CSharpValue x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpValue`1_56">currentEndDate.AddSeconds(-1)</CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </Sequence>
                            </If.Then>
                            <If.Else>
                              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_17" />
                            </If.Else>
                          </If>
                          <ui:InterruptibleWhile CurrentIndex="{x:Null}" DisplayName="While" sap:VirtualizedContainerService.HintSize="510.4,483.2" sap2010:WorkflowViewState.IdRef="InterruptibleWhile_1">
                            <ui:InterruptibleWhile.Body>
                              <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="476.8,346.4" sap2010:WorkflowViewState.IdRef="Sequence_14">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <InvokeMethod DisplayName="Invoke Method" sap:VirtualizedContainerService.HintSize="433.6,135.2" sap2010:WorkflowViewState.IdRef="InvokeMethod_3" MethodName="Add">
                                  <InvokeMethod.TargetObject>
                                    <InArgument x:TypeArguments="scg:List(s:DateTime)">
                                      <CSharpValue x:TypeArguments="scg:List(s:DateTime)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_50">dateList</CSharpValue>
                                    </InArgument>
                                  </InvokeMethod.TargetObject>
                                  <InArgument x:TypeArguments="s:DateTime">
                                    <CSharpValue x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpValue`1_51">currentStartDate</CSharpValue>
                                  </InArgument>
                                </InvokeMethod>
                                <Assign sap:VirtualizedContainerService.HintSize="433.6,81.6" sap2010:WorkflowViewState.IdRef="Assign_6">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="s:DateTime">
                                      <CSharpReference x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpReference`1_18">currentStartDate</CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="s:DateTime">
                                      <CSharpValue x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpValue`1_54">currentStartDate.AddDays(1)</CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </Sequence>
                            </ui:InterruptibleWhile.Body>
                            <ui:InterruptibleWhile.Condition>
                              <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_53">currentStartDate.CompareTo(currentEndDate) &lt;= 0</CSharpValue>
                            </ui:InterruptibleWhile.Condition>
                          </ui:InterruptibleWhile>
                          <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="510.4,355.2" sap2010:WorkflowViewState.IdRef="CommentOut_1">
                            <ui:CommentOut.Body>
                              <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="449.6,276.8" sap2010:WorkflowViewState.IdRef="Sequence_15">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ui:InvokeCode ContinueOnError="{x:Null}" Code="dateList = new List&lt;DateTime&gt;();&#xA;for (DateTime date = currentStartDate; date &lt;= currentEndDate.AddHours(1); date = date.AddDays(1))&#xA;    dateList.Add(date);&#xA;" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="387.2,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_2" Language="CSharp">
                                  <ui:InvokeCode.Arguments>
                                    <InArgument x:TypeArguments="s:DateTime" x:Key="currentStartDate">
                                      <CSharpValue x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpValue`1_48">currentStartDate</CSharpValue>
                                    </InArgument>
                                    <InArgument x:TypeArguments="s:DateTime" x:Key="currentEndDate">
                                      <CSharpValue x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpValue`1_47">currentDate</CSharpValue>
                                    </InArgument>
                                    <InOutArgument x:TypeArguments="scg:List(s:DateTime)" x:Key="dateList">
                                      <CSharpReference x:TypeArguments="scg:List(s:DateTime)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_16">dateList</CSharpReference>
                                    </InOutArgument>
                                  </ui:InvokeCode.Arguments>
                                </ui:InvokeCode>
                              </Sequence>
                            </ui:CommentOut.Body>
                          </ui:CommentOut>
                          <ui:ForEach x:TypeArguments="s:DateTime" CurrentIndex="{x:Null}" sap2010:Annotation.AnnotationText="parcurg fiecare data din meet si o adaug la dict" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="510.4,1092.8" sap2010:WorkflowViewState.IdRef="ForEach`1_3">
                            <ui:ForEach.Body>
                              <ActivityAction x:TypeArguments="s:DateTime">
                                <ActivityAction.Argument>
                                  <DelegateInArgument x:TypeArguments="s:DateTime" Name="currentDateItem" />
                                </ActivityAction.Argument>
                                <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="476.8,873.6" sap2010:WorkflowViewState.IdRef="Sequence_11">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <Assign sap:VirtualizedContainerService.HintSize="433.6,81.6" sap2010:WorkflowViewState.IdRef="Assign_4">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="s:DateTime">
                                        <CSharpReference x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpReference`1_11">currentDate</CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="s:DateTime">
                                        <CSharpValue x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpValue`1_59">currentDateItem</CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <If sap:VirtualizedContainerService.HintSize="433.6,662.4" sap2010:WorkflowViewState.IdRef="If_3">
                                    <If.Condition>
                                      <InArgument x:TypeArguments="x:Boolean">
                                        <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_35">absencesVar.ContainsKey(currentDate)</CSharpValue>
                                      </InArgument>
                                    </If.Condition>
                                    <If.Then>
                                      <Sequence DisplayName="" sap:VirtualizedContainerService.HintSize="376.8,254.4" sap2010:WorkflowViewState.IdRef="Sequence_12">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ui:InvokeCode ContinueOnError="{x:Null}" Code="absencesVar[currentDate].Add(currentItem);" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="333.6,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_1" Language="CSharp">
                                          <ui:InvokeCode.Arguments>
                                            <InOutArgument x:TypeArguments="scg:Dictionary(s:DateTime, scg:List(mg:Event))" x:Key="absencesVar">
                                              <CSharpReference x:TypeArguments="scg:Dictionary(s:DateTime, scg:List(mg:Event))" sap2010:WorkflowViewState.IdRef="CSharpReference`1_20">absencesVar</CSharpReference>
                                            </InOutArgument>
                                            <InArgument x:TypeArguments="s:DateTime" x:Key="currentDate">
                                              <CSharpValue x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpValue`1_37">currentDate</CSharpValue>
                                            </InArgument>
                                            <InArgument x:TypeArguments="mg:Event" x:Key="currentItem">
                                              <CSharpValue x:TypeArguments="mg:Event" sap2010:WorkflowViewState.IdRef="CSharpValue`1_38">currentItem</CSharpValue>
                                            </InArgument>
                                          </ui:InvokeCode.Arguments>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                        </ui:InvokeCode>
                                      </Sequence>
                                    </If.Then>
                                    <If.Else>
                                      <Sequence DisplayName="" sap:VirtualizedContainerService.HintSize="300,224.8" sap2010:WorkflowViewState.IdRef="Sequence_13">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <InvokeMethod DisplayName="Invoke Method" sap:VirtualizedContainerService.HintSize="256.8,135.2" sap2010:WorkflowViewState.IdRef="InvokeMethod_2" MethodName="Add">
                                          <InvokeMethod.TargetObject>
                                            <InArgument x:TypeArguments="scg:Dictionary(s:DateTime, scg:List(mg:Event))">
                                              <CSharpValue x:TypeArguments="scg:Dictionary(s:DateTime, scg:List(mg:Event))" sap2010:WorkflowViewState.IdRef="CSharpValue`1_31">absencesVar</CSharpValue>
                                            </InArgument>
                                          </InvokeMethod.TargetObject>
                                          <InArgument x:TypeArguments="s:DateTime">
                                            <CSharpValue x:TypeArguments="s:DateTime" sap2010:WorkflowViewState.IdRef="CSharpValue`1_39">currentDate</CSharpValue>
                                          </InArgument>
                                          <InArgument x:TypeArguments="scg:List(mg:Event)">
                                            <CSharpValue x:TypeArguments="scg:List(mg:Event)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_30">new List&lt;Microsoft.Graph.Event&gt; {currentItem}</CSharpValue>
                                          </InArgument>
                                        </InvokeMethod>
                                      </Sequence>
                                    </If.Else>
                                  </If>
                                </Sequence>
                              </ActivityAction>
                            </ui:ForEach.Body>
                            <ui:ForEach.Values>
                              <InArgument x:TypeArguments="sc:IEnumerable">
                                <CSharpValue x:TypeArguments="sc:IEnumerable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_46">dateList</CSharpValue>
                              </InArgument>
                            </ui:ForEach.Values>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </ui:ForEach>
                        </Sequence>
                      </If.Then>
                      <If.Else>
                        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_8" />
                      </If.Else>
                    </If>
                    <If sap2010:Annotation.AnnotationText="conditia care verifica daca e un absence pus de el&#xA;rol test only, ca tot codul de mai jos" sap:VirtualizedContainerService.HintSize="587.2,128.8" sap2010:WorkflowViewState.IdRef="If_1">
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_21" xml:space="preserve">currentItem.Organizer.EmailAddress.Address.Equals(emailEmployee) &amp;&amp; // organizator = el
currentItem.Attendees.Any(a =&gt; a.EmailAddress.Address.Equals(emailGroup)) &amp;&amp; // attendee = grup
currentItem.Subject.StartsWith("Absence")</CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <If.Then>
                        <Sequence sap:VirtualizedContainerService.HintSize="476.8,171.2" sap2010:WorkflowViewState.IdRef="Sequence_5">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <Assign sap:VirtualizedContainerService.HintSize="433.6,81.6" sap2010:WorkflowViewState.IdRef="Assign_2">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:String">
                                <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_8">outStr</CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:String">
                                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_18">outStr + Environment.NewLine + "Checked: true" + Environment.NewLine</CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                        </Sequence>
                      </If.Then>
                      <If.Else>
                        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_6" />
                      </If.Else>
                    </If>
                    <ui:ForEach x:TypeArguments="x:Object" CurrentIndex="{x:Null}" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="587.2,52.8" sap2010:WorkflowViewState.IdRef="ForEach`1_2">
                      <ui:ForEach.Body>
                        <ActivityAction x:TypeArguments="x:Object">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="x:Object" Name="currentAttendee" />
                          </ActivityAction.Argument>
                          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="521.6,237.6" sap2010:WorkflowViewState.IdRef="Sequence_4">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="478.4,148" sap2010:WorkflowViewState.IdRef="MultipleAssign_2">
                              <ui:MultipleAssign.AssignOperations>
                                <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
                                    <ui:AssignOperation.To>
                                      <OutArgument x:TypeArguments="mg:Attendee">
                                        <CSharpReference x:TypeArguments="mg:Attendee" sap2010:WorkflowViewState.IdRef="CSharpReference`1_6">attendee</CSharpReference>
                                      </OutArgument>
                                    </ui:AssignOperation.To>
                                    <ui:AssignOperation.Value>
                                      <InArgument x:TypeArguments="mg:Attendee">
                                        <CSharpValue x:TypeArguments="mg:Attendee" sap2010:WorkflowViewState.IdRef="CSharpValue`1_15">(Microsoft.Graph.Attendee) currentAttendee</CSharpValue>
                                      </InArgument>
                                    </ui:AssignOperation.Value>
                                  </ui:AssignOperation>
                                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
                                    <ui:AssignOperation.To>
                                      <OutArgument x:TypeArguments="x:String">
                                        <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_7">outStr</CSharpReference>
                                      </OutArgument>
                                    </ui:AssignOperation.To>
                                    <ui:AssignOperation.Value>
                                      <InArgument x:TypeArguments="x:String">
                                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_16">outStr + attendee.EmailAddress.Address + Environment.NewLine</CSharpValue>
                                      </InArgument>
                                    </ui:AssignOperation.Value>
                                  </ui:AssignOperation>
                                </scg:List>
                              </ui:MultipleAssign.AssignOperations>
                            </ui:MultipleAssign>
                          </Sequence>
                        </ActivityAction>
                      </ui:ForEach.Body>
                      <ui:ForEach.Values>
                        <InArgument x:TypeArguments="sc:IEnumerable">
                          <CSharpValue x:TypeArguments="sc:IEnumerable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_14">currentItem.Attendees</CSharpValue>
                        </InArgument>
                      </ui:ForEach.Values>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:ForEach>
                    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="587.2,276" sap2010:WorkflowViewState.IdRef="CommentOut_3">
                      <ui:CommentOut.Body>
                        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="449.6,197.6" sap2010:WorkflowViewState.IdRef="Sequence_19">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:MessageBox Caption="{x:Null}" ChosenButton="{x:Null}" AutoCloseAfter="00:00:00" DisplayName="Message Box" sap:VirtualizedContainerService.HintSize="387.2,85.6" sap2010:WorkflowViewState.IdRef="MessageBox_1">
                            <ui:MessageBox.Text>
                              <InArgument x:TypeArguments="x:Object">
                                <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_13">outStr</CSharpValue>
                              </InArgument>
                            </ui:MessageBox.Text>
                          </ui:MessageBox>
                        </Sequence>
                      </ui:CommentOut.Body>
                    </ui:CommentOut>
                  </Sequence>
                </ActivityAction>
              </ui:ForEach.Body>
              <ui:ForEach.Values>
                <InArgument x:TypeArguments="sc:IEnumerable">
                  <CSharpValue x:TypeArguments="sc:IEnumerable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_4">events</CSharpValue>
                </InArgument>
              </ui:ForEach.Values>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:ForEach>
            <Assign sap:VirtualizedContainerService.HintSize="664,81.6" sap2010:WorkflowViewState.IdRef="Assign_8">
              <Assign.To>
                <OutArgument x:TypeArguments="scg:Dictionary(s:DateTime, scg:List(mg:Event))">
                  <CSharpReference x:TypeArguments="scg:Dictionary(s:DateTime, scg:List(mg:Event))" sap2010:WorkflowViewState.IdRef="CSharpReference`1_12">absences</CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="scg:Dictionary(s:DateTime, scg:List(mg:Event))">
                  <CSharpValue x:TypeArguments="scg:Dictionary(s:DateTime, scg:List(mg:Event))" sap2010:WorkflowViewState.IdRef="CSharpValue`1_42">absencesVar</CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </ActivityAction>
      </uma:Office365ApplicationScope.Body>
      <uma:Office365ApplicationScope.TenantId>
        <InArgument x:TypeArguments="x:String">
          <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_61">GlobalVariablesNamespace.GlobalVariables.strTenant</CSharpValue>
        </InArgument>
      </uma:Office365ApplicationScope.TenantId>
      <uma:Office365ApplicationScope.Username>
        <InArgument x:TypeArguments="x:String">
          <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_1">emailEmployee</CSharpValue>
        </InArgument>
      </uma:Office365ApplicationScope.Username>
    </uma:Office365ApplicationScope>
  </Sequence>
</Activity>